//-----------------------------------------------------------------------------
// lanConstants.h
// 
// Releases:
//     1.0  - Initial release
//     1.1  - "FPS Unlock" & "Aspect Correction" improvements, "Launcher Check",
//            "Skip Logo&Legals" & "FPS Lock" added, "Force Resolution" bugfix.
//     1.1a - Added "Force DX11" option, fixed a bug with force resolution.
//     1.1b - Added support for 2675, fixed dinput8.dll not found on 32-bit
//            systems, made WinAPI error messages more verbose.
// 
// Copyright (c) 2021-2022 Václav AKA Vaana
//-----------------------------------------------------------------------------

#pragma once

#define VPATCH_VERSION_MAJOR "1"
#define VPATCH_VERSION_MINOR "1b"
#define VPATCH_VERSION_PATCH ""

#define VPATCH_VERSION		VPATCH_VERSION_MAJOR "." VPATCH_VERSION_MINOR VPATCH_VERSION_PATCH
#define VPATCH_VERSION_MENU VPATCH_VERSION_MAJOR "·" VPATCH_VERSION_MINOR VPATCH_VERSION_PATCH

//
// Types, macros and definitions
//

typedef unsigned long Address;
typedef unsigned char Opcode;

#define NO_SECURITY_CHECKS __declspec(safebuffers)

//
// Version info
//

enum LAN_VERSION
{
	LAN_VERSION_2617R, // Old retail version
	LAN_VERSION_2617S, // Old Steam version
	/*LAN_VERSION_2651, // Old R* Launcher*/
	LAN_VERSION_2663R, // Old R* Launcher
	LAN_VERSION_2663S, // Old Steam
	LAN_VERSION_2675S, // Steam
	LAN_VERSION_2675R, // R* Launcher

	LAN_NUM_VERSIONS
};

#define LAN_LATEST_BUILD	2675

#define LAN_TIMESTAMP_2617R 0x4FF2D605 // Old retail
#define LAN_TIMESTAMP_2617S 0x4FF45207 // Old Steam
#define LAN_TIMESTAMP_2663R 0x5FD887BA // Old R* Launcher
#define LAN_TIMESTAMP_2663S 0x5FF71F4D // Old Steam
#define LAN_TIMESTAMP_2675S 0x620CD479 // Steam
#define LAN_TIMESTAMP_2675R 0x620CD48A // R* Launcher

//
// Constants
//

#define LAN_DEFAULT_WIDTH				1280
#define LAN_DEFAULT_HEIGHT				720
#define LAN_DEFAULT_ASPECT				1.77777778f
#define LAN_DEFAULT_ASPECT_INVERSE		0.5625f

#define LAN_MINIMAL_FRAMERATE			29.97
#define LAN_DEFAULT_BRAKING_CONSTANT	30.00
#define LAN_FRAMETIME_MENU				0.0166833512f
#define LAN_FRAMETIME_GAME				0.0333667025f


//
// Addresses
//

enum
{
	OFFSET_POINTER_RENDERER,			// Static pointer to the renderer instance.
	OFFSET_HOOK_VERSION,				// Call of VerQueryValue used to determine the current game version.
	OFFSET_HOOK_FRAME,					// Call of function determening the type of the current frame.
	OFFSET_HOOK_MAP_VTABLE,				// Vtable entry of map, used for input processing.
	OFFSET_PATCH_CAR_BRAKE_CONSTANT,	// Constant affecting the braking speed/force of cars.
	OFFSET_PATCH_ASPECT_FILTER,			// Condition filtering out unsupported ratios from the resolution list.
	OFFSET_PATCH_ASPECT_CROP,			// Condition checking the aspect ratio and forcing viewport cropping.
	OFFSET_HOOK_FIELD_OF_VIEW_VTABLE,	// Vtable of camera class, derived class used in gameplay.
	OFFSET_HOOK_INTERFACE,				// Call of atoi used to parse the resolution string.
	OFFSET_VALUE_INTERFACE_WIDTH,		// Virtual interface width
	OFFSET_VALUE_INTERFACE_HEIGHT,		// Virtual interface height
	OFFSET_PATCH_LAUNCHER_CHECK,		// Condition checking whether the game was launched through the launcher.
	OFFSET_PATCH_MOVIE_LOGO,			// Call of function to load and play the intro logo.
	OFFSET_PATCH_LEGALS_SCREEN,			// Call of function to show the legals screen.
	OFFSET_PATCH_DX11,					// Condition checking if -dx11 is set.
	OFFSET_PATCH_ARGS_RESOLUTION,		// Condition checking if -res is set.
	OFFSET_HOOK_RESOLUTION,				// Call of strtol to parse the resolution argument.
	OFFSET_PATCH_RESOLUTION_CHECK,		// Condition checking if the resolution is in the resolution list.
	OFFSET_HOOK_CREATE_WINDOW,			// Call of CreateWindowExA used to create a borderless window.
	OFFSET_PATCH_ARGS_WINDOWED,			// Condition checking if -windowed is set.

	NUM_OFFSETS
};

#define OFFSET(a) (a - 0x400000)

const Address addresses[LAN_NUM_VERSIONS][NUM_OFFSETS] =
{
	// 2617 (retail)
	{
		OFFSET(0x014EBC30), // OFFSET_POINTER_RENDERER
		OFFSET(0x0041F92D), // OFFSET_HOOK_VERSION
		OFFSET(0x00A7D26F), // OFFSET_HOOK_FRAME
		OFFSET(0x010D1C60), // OFFSET_HOOK_MAP_VTABLE
		OFFSET(0x00E1B17F), // OFFSET_PATCH_CAR_BRAKE_CONSTANT
		OFFSET(0x009BFC82), // OFFSET_PATCH_ASPECT_FILTER
		OFFSET(0x00D34E30), // OFFSET_PATCH_ASPECT_CROP
		OFFSET(0x01146380), // OFFSET_HOOK_FIELD_OF_VIEW_VTABLE
		OFFSET(0x009C119D), // OFFSET_HOOK_INTERFACE
		OFFSET(0x0122A0C8), // OFFSET_VALUE_INTERFACE_WIDTH
		OFFSET(0x0122A0C0), // OFFSET_VALUE_INTERFACE_HEIGHT
		OFFSET(0x00A7797E), // OFFSET_PATCH_LAUNCHER_CHECK
		OFFSET(0x00A7B48C), // OFFSET_PATCH_MOVIE_LOGO
		OFFSET(0x0103AC70), // OFFSET_PATCH_LEGALS_SCREEN
		OFFSET(0x00A77BBC), // OFFSET_PATCH_DX11
		OFFSET(0x00A7869A), // OFFSET_PATCH_ARGS_RESOLUTION
		OFFSET(0x00A786E1), // OFFSET_HOOK_RESOLUTION
		OFFSET(0x00B04EEF), // OFFSET_PATCH_RESOLUTION_CHECK
		OFFSET(0x00A7FE77), // OFFSET_HOOK_CREATE_WINDOW
		OFFSET(0x00A7867C), // OFFSET_PATCH_ARGS_WINDOWED
	},

	// 2617 (Steam)
	{
		OFFSET(0x0151AC40), // OFFSET_POINTER_RENDERER
		OFFSET(0x0041FBA0), // OFFSET_HOOK_VERSION
		OFFSET(0x00A8E71F), // OFFSET_HOOK_FRAME
		OFFSET(0x01101B38), // OFFSET_HOOK_MAP_VTABLE
		OFFSET(0x00E4937B), // OFFSET_PATCH_CAR_BRAKE_CONSTANT
		OFFSET(0x009CE822), // OFFSET_PATCH_ASPECT_FILTER
		OFFSET(0x00D51D59), // OFFSET_PATCH_ASPECT_CROP
		OFFSET(0x01176268), // OFFSET_HOOK_FIELD_OF_VIEW_VTABLE
		OFFSET(0x009CFD3D), // OFFSET_HOOK_INTERFACE
		OFFSET(0x01259E50), // OFFSET_VALUE_INTERFACE_WIDTH
		OFFSET(0x01259E48), // OFFSET_VALUE_INTERFACE_HEIGHT
		OFFSET(0x00A88E1E), // OFFSET_PATCH_LAUNCHER_CHECK
		OFFSET(0x00A8C93E), // OFFSET_PATCH_MOVIE_LOGO
		OFFSET(0x0106ADC0), // OFFSET_PATCH_LEGALS_SCREEN
		OFFSET(0x00A890B6), // OFFSET_PATCH_DX11
		OFFSET(0x00A89B28), // OFFSET_PATCH_ARGS_RESOLUTION
		OFFSET(0x00A89B6F), // OFFSET_HOOK_RESOLUTION
		OFFSET(0x00B17D3F), // OFFSET_PATCH_RESOLUTION_CHECK
		OFFSET(0x00A914A7), // OFFSET_HOOK_CREATE_WINDOW
		OFFSET(0x00A89B0A), // OFFSET_PATCH_ARGS_WINDOWED
	},

	// 2663 (R* Launcher)
	{
		OFFSET(0x014ED230), // OFFSET_POINTER_RENDERER
		OFFSET(0x00B8B99A), // OFFSET_HOOK_VERSION
		OFFSET(0x009DBF0F), // OFFSET_HOOK_FRAME
		OFFSET(0x011FAC78), // OFFSET_HOOK_MAP_VTABLE
		OFFSET(0x00E1C96F), // OFFSET_PATCH_CAR_BRAKE_CONSTANT
		OFFSET(0x0091DF62), // OFFSET_PATCH_ASPECT_FILTER
		OFFSET(0x00D34DD0), // OFFSET_PATCH_ASPECT_CROP
		OFFSET(0x0112F3A0), // OFFSET_HOOK_FIELD_OF_VIEW_VTABLE
		OFFSET(0x0091F47D), // OFFSET_HOOK_INTERFACE
		OFFSET(0x0122BB10), // OFFSET_VALUE_INTERFACE_WIDTH
		OFFSET(0x0122BB08), // OFFSET_VALUE_INTERFACE_HEIGHT
		OFFSET(0x009D666C), // OFFSET_PATCH_LAUNCHER_CHECK
		OFFSET(0x009DA0F6), // OFFSET_PATCH_MOVIE_LOGO
		OFFSET(0x01066B30), // OFFSET_PATCH_LEGALS_SCREEN
		OFFSET(0x009D686D), // OFFSET_PATCH_DX11
		OFFSET(0x009D72C1), // OFFSET_PATCH_ARGS_RESOLUTION
		OFFSET(0x009D7308), // OFFSET_HOOK_RESOLUTION
		OFFSET(0x00A6408F), // OFFSET_PATCH_RESOLUTION_CHECK
		OFFSET(0x009DEB0E), // OFFSET_HOOK_CREATE_WINDOW
		OFFSET(0x009D72A3), // OFFSET_PATCH_ARGS_WINDOWED
	},

	// 2663 (Steam)
	{
		OFFSET(0x01524420), // OFFSET_POINTER_RENDERER
		OFFSET(0x00BA2F00), // OFFSET_HOOK_VERSION
		OFFSET(0x009ED68F), // OFFSET_HOOK_FRAME
		OFFSET(0x01231CD8), // OFFSET_HOOK_MAP_VTABLE
		OFFSET(0x00E5186B), // OFFSET_PATCH_CAR_BRAKE_CONSTANT
		OFFSET(0x0092D082), // OFFSET_PATCH_ASPECT_FILTER
		OFFSET(0x00D58BE9), // OFFSET_PATCH_ASPECT_CROP
		OFFSET(0x011663D8), // OFFSET_HOOK_FIELD_OF_VIEW_VTABLE
		OFFSET(0x0092E59D), // OFFSET_HOOK_INTERFACE
		OFFSET(0x01262C00), // OFFSET_VALUE_INTERFACE_WIDTH
		OFFSET(0x01262BF8), // OFFSET_VALUE_INTERFACE_HEIGHT
		OFFSET(0x009E7DCC), // OFFSET_PATCH_LAUNCHER_CHECK
		OFFSET(0x009EB8B6), // OFFSET_PATCH_MOVIE_LOGO
		OFFSET(0x0109DED0), // OFFSET_PATCH_LEGALS_SCREEN
		OFFSET(0x009E8025), // OFFSET_PATCH_DX11
		OFFSET(0x009E8A81), // OFFSET_PATCH_ARGS_RESOLUTION
		OFFSET(0x009E8AC8), // OFFSET_HOOK_RESOLUTION
		OFFSET(0x00A775FF), // OFFSET_PATCH_RESOLUTION_CHECK
		OFFSET(0x009F04CE), // OFFSET_HOOK_CREATE_WINDOW
		OFFSET(0x009E8A63), // OFFSET_PATCH_ARGS_WINDOWED
	},
	
	// 2675 (Steam)
	{
		OFFSET(0x015264E0), // OFFSET_POINTER_RENDERER
		OFFSET(0x00BA3B7A), // OFFSET_HOOK_VERSION
		OFFSET(0x009EE9CF), // OFFSET_HOOK_FRAME
		OFFSET(0x01230398), // OFFSET_HOOK_MAP_VTABLE
		OFFSET(0x00E51EDB), // OFFSET_PATCH_CAR_BRAKE_CONSTANT
		OFFSET(0x0092E122), // OFFSET_PATCH_ASPECT_FILTER
		OFFSET(0x00D58A0B), // OFFSET_PATCH_ASPECT_CROP
		OFFSET(0x01167D90), // OFFSET_HOOK_FIELD_OF_VIEW_VTABLE
		OFFSET(0x0092F63D), // OFFSET_HOOK_INTERFACE
		OFFSET(0x01263C08), // OFFSET_VALUE_INTERFACE_WIDTH
		OFFSET(0x01263C00), // OFFSET_VALUE_INTERFACE_HEIGHT
		OFFSET(0x009E92C7), // OFFSET_PATCH_LAUNCHER_CHECK
		OFFSET(0x009ECB89), // OFFSET_PATCH_MOVIE_LOGO
		OFFSET(0x0109E5A0), // OFFSET_PATCH_LEGALS_SCREEN
		OFFSET(0x009E951A), // OFFSET_PATCH_DX11
		OFFSET(0x009E9F84), // OFFSET_PATCH_ARGS_RESOLUTION
		OFFSET(0x009E9FCB), // OFFSET_HOOK_RESOLUTION
		OFFSET(0x00A78D4F), // OFFSET_PATCH_RESOLUTION_CHECK
		OFFSET(0x009F17AE), // OFFSET_HOOK_CREATE_WINDOW
		OFFSET(0x009E9F66), // OFFSET_PATCH_ARGS_WINDOWED
	},

	// 2675 (R* Launcher)
	{
		OFFSET(0x014EE2F0), // OFFSET_POINTER_RENDERER
		OFFSET(0x00B8C114), // OFFSET_HOOK_VERSION
		OFFSET(0x009DBF5F), // OFFSET_HOOK_FRAME
		OFFSET(0x011F9B80), // OFFSET_HOOK_MAP_VTABLE
		OFFSET(0x00E1D32F), // OFFSET_PATCH_CAR_BRAKE_CONSTANT
		OFFSET(0x0091E582), // OFFSET_PATCH_ASPECT_FILTER
		OFFSET(0x00D35739), // OFFSET_PATCH_ASPECT_CROP
		OFFSET(0x01130D60), // OFFSET_HOOK_FIELD_OF_VIEW_VTABLE
		OFFSET(0x0091FA9D), // OFFSET_HOOK_INTERFACE
		OFFSET(0x0122CB10), // OFFSET_VALUE_INTERFACE_WIDTH
		OFFSET(0x0122CB08), // OFFSET_VALUE_INTERFACE_HEIGHT
		OFFSET(0x009D6947), // OFFSET_PATCH_LAUNCHER_CHECK
		OFFSET(0x009DA199), // OFFSET_PATCH_MOVIE_LOGO
		OFFSET(0x01067640), // OFFSET_PATCH_LEGALS_SCREEN
		OFFSET(0x009D6B44), // OFFSET_PATCH_DX11
		OFFSET(0x009D7594), // OFFSET_PATCH_ARGS_RESOLUTION
		OFFSET(0x009D75DB), // OFFSET_HOOK_RESOLUTION
		OFFSET(0x00A6493F), // OFFSET_PATCH_RESOLUTION_CHECK
		OFFSET(0x009DEB9E), // OFFSET_HOOK_CREATE_WINDOW
		OFFSET(0x009D7576), // OFFSET_PATCH_ARGS_WINDOWED
	},
};

//
// Helper structs
//

#pragma pack(push, 1)

struct mov
{
	Opcode opcode;
	unsigned char reg;
	Address address;
};

struct add
{
	Opcode opcode;
	unsigned char reg;
	unsigned char value;
};

struct mulsd
{
	Opcode opcode;
	unsigned char type1;
	unsigned char type2;
	unsigned char reg;
	Address address;
};

struct fmul
{
	Opcode opcode;
	unsigned char type;
	Address address;
};

struct fdiv
{
	Opcode opcode;
	unsigned char type;
	Address address;
};

struct callOld
{
	Opcode opcode;
	Address address;
};

struct callPtrOld
{
	Opcode opcode;
	unsigned char type;
	Address address;
};

struct jmpByte
{
	Opcode opcode;
	unsigned char offset;
};

struct retNear
{
	Opcode opcode;
};

#pragma pack(pop)

